import { State, Props, TransformationSetItem } from '../types';
export declare const getShiftIndex: (itemsInSlide?: number, itemsOffset?: number) => number;
export declare const getStartIndex: (index?: number, childrenLength?: number) => number;
export declare const getActiveIndex: (index: number, dotsLength: number, infinite: boolean) => number;
export declare const getUpdateSlidePositionIndex: (activeIndex: number, itemsCount: number) => number;
export declare const shouldRecalculateSlideIndex: (activeIndex: any, itemsCount: any) => boolean;
export declare const shouldCancelSlideAnimation: (activeIndex: any, itemsCount: any, itemsInSlide: any) => boolean;
export declare const getSwipeLimitMin: (state: Partial<State>, props: Partial<Props>) => number;
export declare const getSwipeLimitMax: (state: Partial<State>, props: Partial<Props>) => number;
export declare const shouldRecalculateSwipePosition: (currentPosition: any, minPosition: any, maxPosition: any) => boolean;
export declare const getIsLeftDirection: (deltaX?: number) => boolean;
export declare const getTransformationSetItem: (cursor?: number, transformationSet?: TransformationSetItem[]) => TransformationSetItem;
export declare const getSwipeShiftValue: (cursor?: number, transformationSet?: TransformationSetItem[]) => number;
export declare const getTransformationItemIndex: (transformationSet?: TransformationSetItem[], position?: number) => number;
export declare const getSwipeTransformationCursor: (transformationSet?: TransformationSetItem[], position?: number, deltaX?: number) => number;
export declare const getSwipeTouchendPosition: (state: State, deltaX: number, swipePosition?: number) => number;
export declare const getSwipeTouchendIndex: (position: any, state: State) => number;
export declare const getFadeoutAnimationIndex: (state: State) => number;
export declare const getFadeoutAnimationPosition: (nextIndex: any, state: State) => number;
export declare const isVerticalTouchmoveDetected: (absX: number, absY: number, swipeDelta?: number) => boolean;
