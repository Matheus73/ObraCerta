{"ast":null,"code":"var reactProperty = require('react-property');\n\nvar styleToObject = require('style-to-object');\n\nvar utilities = require('./utilities');\n\nvar camelCase = utilities.camelCase;\nvar htmlProperties = reactProperty.html;\nvar svgProperties = reactProperty.svg;\nvar isCustomAttribute = reactProperty.isCustomAttribute;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Converts HTML/SVG DOM attributes to React props.\n *\n * @param  {Object} [attributes={}] - The HTML/SVG DOM attributes.\n * @return {Object}                 - The React props.\n */\n\nfunction attributesToProps(attributes) {\n  attributes = attributes || {};\n  var attributeName;\n  var attributeNameLowerCased;\n  var attributeValue;\n  var property;\n  var props = {};\n\n  for (attributeName in attributes) {\n    attributeValue = attributes[attributeName]; // ARIA (aria-*) or custom data (data-*) attribute\n\n    if (isCustomAttribute(attributeName)) {\n      props[attributeName] = attributeValue;\n      continue;\n    } // convert HTML attribute to React prop\n\n\n    attributeNameLowerCased = attributeName.toLowerCase();\n\n    if (hasOwnProperty.call(htmlProperties, attributeNameLowerCased)) {\n      property = htmlProperties[attributeNameLowerCased];\n      props[property.propertyName] = property.hasBooleanValue || property.hasOverloadedBooleanValue && !attributeValue ? true : attributeValue;\n      continue;\n    } // convert SVG attribute to React prop\n\n\n    if (hasOwnProperty.call(svgProperties, attributeName)) {\n      property = svgProperties[attributeName];\n      props[property.propertyName] = attributeValue;\n      continue;\n    } // preserve custom attribute if React >=16\n\n\n    if (utilities.PRESERVE_CUSTOM_ATTRIBUTES) {\n      props[attributeName] = attributeValue;\n    }\n  } // convert inline style to object\n\n\n  if (attributes.style != null) {\n    props.style = cssToJs(attributes.style);\n  }\n\n  return props;\n}\n/**\n * Converts inline CSS style to POJO (Plain Old JavaScript Object).\n *\n * @param  {String} style - The inline CSS style.\n * @return {Object}       - The style object.\n */\n\n\nfunction cssToJs(style) {\n  var styleObject = {};\n\n  if (style) {\n    styleToObject(style, function (property, value) {\n      // skip CSS comment\n      if (property && value) {\n        styleObject[camelCase(property)] = value;\n      }\n    });\n  }\n\n  return styleObject;\n}\n\nmodule.exports = attributesToProps;","map":{"version":3,"sources":["/home/matheus/Documents/UNB/MDS/ObraCerta/front/node_modules/html-react-parser/lib/attributes-to-props.js"],"names":["reactProperty","require","styleToObject","utilities","camelCase","htmlProperties","html","svgProperties","svg","isCustomAttribute","hasOwnProperty","Object","prototype","attributesToProps","attributes","attributeName","attributeNameLowerCased","attributeValue","property","props","toLowerCase","call","propertyName","hasBooleanValue","hasOverloadedBooleanValue","PRESERVE_CUSTOM_ATTRIBUTES","style","cssToJs","styleObject","value","module","exports"],"mappings":"AAAA,IAAIA,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAA3B;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIG,SAAS,GAAGD,SAAS,CAACC,SAA1B;AAEA,IAAIC,cAAc,GAAGL,aAAa,CAACM,IAAnC;AACA,IAAIC,aAAa,GAAGP,aAAa,CAACQ,GAAlC;AACA,IAAIC,iBAAiB,GAAGT,aAAa,CAACS,iBAAtC;AAEA,IAAIC,cAAc,GAAGC,MAAM,CAACC,SAAP,CAAiBF,cAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASG,iBAAT,CAA2BC,UAA3B,EAAuC;AACrCA,EAAAA,UAAU,GAAGA,UAAU,IAAI,EAA3B;AAEA,MAAIC,aAAJ;AACA,MAAIC,uBAAJ;AACA,MAAIC,cAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,KAAK,GAAG,EAAZ;;AAEA,OAAKJ,aAAL,IAAsBD,UAAtB,EAAkC;AAChCG,IAAAA,cAAc,GAAGH,UAAU,CAACC,aAAD,CAA3B,CADgC,CAGhC;;AACA,QAAIN,iBAAiB,CAACM,aAAD,CAArB,EAAsC;AACpCI,MAAAA,KAAK,CAACJ,aAAD,CAAL,GAAuBE,cAAvB;AACA;AACD,KAP+B,CAShC;;;AACAD,IAAAA,uBAAuB,GAAGD,aAAa,CAACK,WAAd,EAA1B;;AACA,QAAIV,cAAc,CAACW,IAAf,CAAoBhB,cAApB,EAAoCW,uBAApC,CAAJ,EAAkE;AAChEE,MAAAA,QAAQ,GAAGb,cAAc,CAACW,uBAAD,CAAzB;AACAG,MAAAA,KAAK,CAACD,QAAQ,CAACI,YAAV,CAAL,GACEJ,QAAQ,CAACK,eAAT,IACCL,QAAQ,CAACM,yBAAT,IAAsC,CAACP,cADxC,GAEI,IAFJ,GAGIA,cAJN;AAKA;AACD,KAnB+B,CAqBhC;;;AACA,QAAIP,cAAc,CAACW,IAAf,CAAoBd,aAApB,EAAmCQ,aAAnC,CAAJ,EAAuD;AACrDG,MAAAA,QAAQ,GAAGX,aAAa,CAACQ,aAAD,CAAxB;AACAI,MAAAA,KAAK,CAACD,QAAQ,CAACI,YAAV,CAAL,GAA+BL,cAA/B;AACA;AACD,KA1B+B,CA4BhC;;;AACA,QAAId,SAAS,CAACsB,0BAAd,EAA0C;AACxCN,MAAAA,KAAK,CAACJ,aAAD,CAAL,GAAuBE,cAAvB;AACD;AACF,GAzCoC,CA2CrC;;;AACA,MAAIH,UAAU,CAACY,KAAX,IAAoB,IAAxB,EAA8B;AAC5BP,IAAAA,KAAK,CAACO,KAAN,GAAcC,OAAO,CAACb,UAAU,CAACY,KAAZ,CAArB;AACD;;AAED,SAAOP,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,OAAT,CAAiBD,KAAjB,EAAwB;AACtB,MAAIE,WAAW,GAAG,EAAlB;;AAEA,MAAIF,KAAJ,EAAW;AACTxB,IAAAA,aAAa,CAACwB,KAAD,EAAQ,UAAUR,QAAV,EAAoBW,KAApB,EAA2B;AAC9C;AACA,UAAIX,QAAQ,IAAIW,KAAhB,EAAuB;AACrBD,QAAAA,WAAW,CAACxB,SAAS,CAACc,QAAD,CAAV,CAAX,GAAmCW,KAAnC;AACD;AACF,KALY,CAAb;AAMD;;AAED,SAAOD,WAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiBlB,iBAAjB","sourcesContent":["var reactProperty = require('react-property');\nvar styleToObject = require('style-to-object');\nvar utilities = require('./utilities');\n\nvar camelCase = utilities.camelCase;\n\nvar htmlProperties = reactProperty.html;\nvar svgProperties = reactProperty.svg;\nvar isCustomAttribute = reactProperty.isCustomAttribute;\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Converts HTML/SVG DOM attributes to React props.\n *\n * @param  {Object} [attributes={}] - The HTML/SVG DOM attributes.\n * @return {Object}                 - The React props.\n */\nfunction attributesToProps(attributes) {\n  attributes = attributes || {};\n\n  var attributeName;\n  var attributeNameLowerCased;\n  var attributeValue;\n  var property;\n  var props = {};\n\n  for (attributeName in attributes) {\n    attributeValue = attributes[attributeName];\n\n    // ARIA (aria-*) or custom data (data-*) attribute\n    if (isCustomAttribute(attributeName)) {\n      props[attributeName] = attributeValue;\n      continue;\n    }\n\n    // convert HTML attribute to React prop\n    attributeNameLowerCased = attributeName.toLowerCase();\n    if (hasOwnProperty.call(htmlProperties, attributeNameLowerCased)) {\n      property = htmlProperties[attributeNameLowerCased];\n      props[property.propertyName] =\n        property.hasBooleanValue ||\n        (property.hasOverloadedBooleanValue && !attributeValue)\n          ? true\n          : attributeValue;\n      continue;\n    }\n\n    // convert SVG attribute to React prop\n    if (hasOwnProperty.call(svgProperties, attributeName)) {\n      property = svgProperties[attributeName];\n      props[property.propertyName] = attributeValue;\n      continue;\n    }\n\n    // preserve custom attribute if React >=16\n    if (utilities.PRESERVE_CUSTOM_ATTRIBUTES) {\n      props[attributeName] = attributeValue;\n    }\n  }\n\n  // convert inline style to object\n  if (attributes.style != null) {\n    props.style = cssToJs(attributes.style);\n  }\n\n  return props;\n}\n\n/**\n * Converts inline CSS style to POJO (Plain Old JavaScript Object).\n *\n * @param  {String} style - The inline CSS style.\n * @return {Object}       - The style object.\n */\nfunction cssToJs(style) {\n  var styleObject = {};\n\n  if (style) {\n    styleToObject(style, function (property, value) {\n      // skip CSS comment\n      if (property && value) {\n        styleObject[camelCase(property)] = value;\n      }\n    });\n  }\n\n  return styleObject;\n}\n\nmodule.exports = attributesToProps;\n"]},"metadata":{},"sourceType":"script"}