{"ast":null,"code":"//      \n// An event handler can take an optional event argument\n// and should not return a value\n// An array of all currently registered event handlers for a type\n// A map of event types and their corresponding event handlers.\n\n/** Mitt: Tiny (~200b) functional event emitter / pubsub.\n *  @name mitt\n *  @returns {Mitt}\n */\nfunction mitt(all) {\n  all = all || Object.create(null);\n  return {\n    /**\n     * Register an event handler for the given type.\n     *\n     * @param  {String} type\tType of event to listen for, or `\"*\"` for all events\n     * @param  {Function} handler Function to call in response to given event\n     * @memberOf mitt\n     */\n    on: function on(type, handler) {\n      (all[type] || (all[type] = [])).push(handler);\n    },\n\n    /**\n     * Remove an event handler for the given type.\n     *\n     * @param  {String} type\tType of event to unregister `handler` from, or `\"*\"`\n     * @param  {Function} handler Handler function to remove\n     * @memberOf mitt\n     */\n    off: function off(type, handler) {\n      if (all[type]) {\n        all[type].splice(all[type].indexOf(handler) >>> 0, 1);\n      }\n    },\n\n    /**\n     * Invoke all handlers for the given type.\n     * If present, `\"*\"` handlers are invoked after type-matched handlers.\n     *\n     * @param {String} type  The event type to invoke\n     * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler\n     * @memberOf mitt\n     */\n    emit: function emit(type, evt) {\n      (all[type] || []).slice().map(function (handler) {\n        handler(evt);\n      });\n      (all['*'] || []).slice().map(function (handler) {\n        handler(type, evt);\n      });\n    }\n  };\n}\n\nexport default mitt;","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["//      \n// An event handler can take an optional event argument\n// and should not return a value\n                                          \n                                                               \n\n// An array of all currently registered event handlers for a type\n                                            \n                                                            \n// A map of event types and their corresponding event handlers.\n                        \n                                 \n                                   \n  \n\n/** Mitt: Tiny (~200b) functional event emitter / pubsub.\n *  @name mitt\n *  @returns {Mitt}\n */\nfunction mitt(all                 ) {\n\tall = all || Object.create(null);\n\n\treturn {\n\t\t/**\n\t\t * Register an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type\tType of event to listen for, or `\"*\"` for all events\n\t\t * @param  {Function} handler Function to call in response to given event\n\t\t * @memberOf mitt\n\t\t */\n\t\ton: function on(type        , handler              ) {\n\t\t\t(all[type] || (all[type] = [])).push(handler);\n\t\t},\n\n\t\t/**\n\t\t * Remove an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type\tType of event to unregister `handler` from, or `\"*\"`\n\t\t * @param  {Function} handler Handler function to remove\n\t\t * @memberOf mitt\n\t\t */\n\t\toff: function off(type        , handler              ) {\n\t\t\tif (all[type]) {\n\t\t\t\tall[type].splice(all[type].indexOf(handler) >>> 0, 1);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Invoke all handlers for the given type.\n\t\t * If present, `\"*\"` handlers are invoked after type-matched handlers.\n\t\t *\n\t\t * @param {String} type  The event type to invoke\n\t\t * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler\n\t\t * @memberOf mitt\n\t\t */\n\t\temit: function emit(type        , evt     ) {\n\t\t\t(all[type] || []).slice().map(function (handler) { handler(evt); });\n\t\t\t(all['*'] || []).slice().map(function (handler) { handler(type, evt); });\n\t\t}\n\t};\n}\n\nexport default mitt;\n//# sourceMappingURL=mitt.es.js.map\n"]},"metadata":{},"sourceType":"module"}