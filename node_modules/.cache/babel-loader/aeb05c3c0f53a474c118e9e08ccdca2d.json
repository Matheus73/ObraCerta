{"ast":null,"code":"var utilities = require('./utilities'); // constants\n\n\nvar HTML = 'html';\nvar HEAD = 'head';\nvar BODY = 'body';\nvar FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>\n\nvar HEAD_TAG_REGEX = /<head.*>/i;\nvar BODY_TAG_REGEX = /<body.*>/i; // http://www.w3.org/TR/html/syntax.html#void-elements\n\nvar VOID_ELEMENTS_REGEX = /<(area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)(.*?)\\/?>/gi; // detect IE browser\n\nvar isIE9 = utilities.isIE(9);\nvar isIE = isIE9 || utilities.isIE();\n/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */\n\nvar parseFromString;\n\nif (typeof window.DOMParser === 'function') {\n  var domParser = new window.DOMParser(); // IE9 does not support 'text/html' MIME type\n  // https://msdn.microsoft.com/en-us/library/ff975278(v=vs.85).aspx\n\n  var mimeType = isIE9 ? 'text/xml' : 'text/html';\n  /**\n   * Creates an HTML document using `DOMParser.parseFromString`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n\n  parseFromString = function domStringParser(html, tagName) {\n    if (tagName) {\n      html = '<' + tagName + '>' + html + '</' + tagName + '>';\n    } // because IE9 only supports MIME type 'text/xml', void elements need to be self-closed\n\n\n    if (isIE9) {\n      html = html.replace(VOID_ELEMENTS_REGEX, '<$1$2$3/>');\n    }\n\n    return domParser.parseFromString(html, mimeType);\n  };\n}\n/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */\n\n\nvar parseFromDocument;\n\nif (typeof document.implementation === 'object') {\n  // title parameter is required in IE\n  // https://msdn.microsoft.com/en-us/library/ff975457(v=vs.85).aspx\n  var doc = document.implementation.createHTMLDocument(isIE ? 'HTML_DOM_PARSER_TITLE' : undefined);\n  /**\n   * Use HTML document created by `document.implementation.createHTMLDocument`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n\n  parseFromDocument = function createHTMLDocument(html, tagName) {\n    if (tagName) {\n      doc.documentElement.getElementsByTagName(tagName)[0].innerHTML = html;\n      return doc;\n    }\n\n    try {\n      doc.documentElement.innerHTML = html;\n      return doc; // fallback when certain elements in `documentElement` are read-only (IE9)\n    } catch (err) {\n      if (parseFromString) {\n        return parseFromString(html);\n      }\n    }\n  };\n}\n/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */\n\n\nvar parseFromTemplate;\nvar template = document.createElement('template');\n\nif (template.content) {\n  /**\n   * Uses a template element (content fragment) to parse HTML.\n   *\n   * @param  {string} html - The HTML string.\n   * @return {NodeList}\n   */\n  parseFromTemplate = function templateParser(html) {\n    template.innerHTML = html;\n    return template.content.childNodes;\n  };\n} // fallback document parser\n\n\nvar parseWithFallback = parseFromDocument || parseFromString;\n/**\n * Parses HTML string to DOM nodes.\n *\n * @param  {string} html - The HTML string.\n * @return {NodeList|Array}\n */\n\nfunction domparser(html) {\n  var firstTagName;\n  var match = html.match(FIRST_TAG_REGEX);\n\n  if (match && match[1]) {\n    firstTagName = match[1].toLowerCase();\n  }\n\n  var doc;\n  var element;\n  var elements;\n\n  switch (firstTagName) {\n    case HTML:\n      if (parseFromString) {\n        doc = parseFromString(html); // the created document may come with filler head/body elements,\n        // so make sure to remove them if they don't actually exist\n\n        if (!HEAD_TAG_REGEX.test(html)) {\n          element = doc.getElementsByTagName(HEAD)[0];\n\n          if (element) {\n            element.parentNode.removeChild(element);\n          }\n        }\n\n        if (!BODY_TAG_REGEX.test(html)) {\n          element = doc.getElementsByTagName(BODY)[0];\n\n          if (element) {\n            element.parentNode.removeChild(element);\n          }\n        }\n\n        return doc.getElementsByTagName(HTML);\n      }\n\n      break;\n\n    case HEAD:\n    case BODY:\n      if (parseWithFallback) {\n        elements = parseWithFallback(html).getElementsByTagName(firstTagName); // account for possibility of sibling\n\n        if (BODY_TAG_REGEX.test(html) && HEAD_TAG_REGEX.test(html)) {\n          return elements[0].parentNode.childNodes;\n        }\n\n        return elements;\n      }\n\n      break;\n    // low-level tag or text\n\n    default:\n      if (parseFromTemplate) {\n        return parseFromTemplate(html);\n      }\n\n      if (parseWithFallback) {\n        return parseWithFallback(html, BODY).getElementsByTagName(BODY)[0].childNodes;\n      }\n\n      break;\n  }\n\n  return [];\n}\n\nmodule.exports = domparser;","map":{"version":3,"sources":["/home/matheus/Documents/UNB/MDS/ObraCerta/front/node_modules/html-dom-parser/lib/domparser.js"],"names":["utilities","require","HTML","HEAD","BODY","FIRST_TAG_REGEX","HEAD_TAG_REGEX","BODY_TAG_REGEX","VOID_ELEMENTS_REGEX","isIE9","isIE","parseFromString","window","DOMParser","domParser","mimeType","domStringParser","html","tagName","replace","parseFromDocument","document","implementation","doc","createHTMLDocument","undefined","documentElement","getElementsByTagName","innerHTML","err","parseFromTemplate","template","createElement","content","templateParser","childNodes","parseWithFallback","domparser","firstTagName","match","toLowerCase","element","elements","test","parentNode","removeChild","module","exports"],"mappings":"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","sourcesContent":["var utilities = require('./utilities');\n\n// constants\nvar HTML = 'html';\nvar HEAD = 'head';\nvar BODY = 'body';\nvar FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>\nvar HEAD_TAG_REGEX = /<head.*>/i;\nvar BODY_TAG_REGEX = /<body.*>/i;\n// http://www.w3.org/TR/html/syntax.html#void-elements\nvar VOID_ELEMENTS_REGEX = /<(area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)(.*?)\\/?>/gi;\n\n// detect IE browser\nvar isIE9 = utilities.isIE(9);\nvar isIE = isIE9 || utilities.isIE();\n\n/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */\nvar parseFromString;\n\nif (typeof window.DOMParser === 'function') {\n  var domParser = new window.DOMParser();\n\n  // IE9 does not support 'text/html' MIME type\n  // https://msdn.microsoft.com/en-us/library/ff975278(v=vs.85).aspx\n  var mimeType = isIE9 ? 'text/xml' : 'text/html';\n\n  /**\n   * Creates an HTML document using `DOMParser.parseFromString`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromString = function domStringParser(html, tagName) {\n    if (tagName) {\n      html = '<' + tagName + '>' + html + '</' + tagName + '>';\n    }\n\n    // because IE9 only supports MIME type 'text/xml', void elements need to be self-closed\n    if (isIE9) {\n      html = html.replace(VOID_ELEMENTS_REGEX, '<$1$2$3/>');\n    }\n\n    return domParser.parseFromString(html, mimeType);\n  };\n}\n\n/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */\nvar parseFromDocument;\n\nif (typeof document.implementation === 'object') {\n  // title parameter is required in IE\n  // https://msdn.microsoft.com/en-us/library/ff975457(v=vs.85).aspx\n  var doc = document.implementation.createHTMLDocument(\n    isIE ? 'HTML_DOM_PARSER_TITLE' : undefined\n  );\n\n  /**\n   * Use HTML document created by `document.implementation.createHTMLDocument`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromDocument = function createHTMLDocument(html, tagName) {\n    if (tagName) {\n      doc.documentElement.getElementsByTagName(tagName)[0].innerHTML = html;\n      return doc;\n    }\n\n    try {\n      doc.documentElement.innerHTML = html;\n      return doc;\n      // fallback when certain elements in `documentElement` are read-only (IE9)\n    } catch (err) {\n      if (parseFromString) {\n        return parseFromString(html);\n      }\n    }\n  };\n}\n\n/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */\nvar parseFromTemplate;\nvar template = document.createElement('template');\n\nif (template.content) {\n  /**\n   * Uses a template element (content fragment) to parse HTML.\n   *\n   * @param  {string} html - The HTML string.\n   * @return {NodeList}\n   */\n  parseFromTemplate = function templateParser(html) {\n    template.innerHTML = html;\n    return template.content.childNodes;\n  };\n}\n\n// fallback document parser\nvar parseWithFallback = parseFromDocument || parseFromString;\n\n/**\n * Parses HTML string to DOM nodes.\n *\n * @param  {string} html - The HTML string.\n * @return {NodeList|Array}\n */\nfunction domparser(html) {\n  var firstTagName;\n  var match = html.match(FIRST_TAG_REGEX);\n\n  if (match && match[1]) {\n    firstTagName = match[1].toLowerCase();\n  }\n\n  var doc;\n  var element;\n  var elements;\n\n  switch (firstTagName) {\n    case HTML:\n      if (parseFromString) {\n        doc = parseFromString(html);\n\n        // the created document may come with filler head/body elements,\n        // so make sure to remove them if they don't actually exist\n        if (!HEAD_TAG_REGEX.test(html)) {\n          element = doc.getElementsByTagName(HEAD)[0];\n          if (element) {\n            element.parentNode.removeChild(element);\n          }\n        }\n\n        if (!BODY_TAG_REGEX.test(html)) {\n          element = doc.getElementsByTagName(BODY)[0];\n          if (element) {\n            element.parentNode.removeChild(element);\n          }\n        }\n\n        return doc.getElementsByTagName(HTML);\n      }\n      break;\n\n    case HEAD:\n    case BODY:\n      if (parseWithFallback) {\n        elements = parseWithFallback(html).getElementsByTagName(firstTagName);\n\n        // account for possibility of sibling\n        if (BODY_TAG_REGEX.test(html) && HEAD_TAG_REGEX.test(html)) {\n          return elements[0].parentNode.childNodes;\n        }\n\n        return elements;\n      }\n      break;\n\n    // low-level tag or text\n    default:\n      if (parseFromTemplate) {\n        return parseFromTemplate(html);\n      }\n\n      if (parseWithFallback) {\n        return parseWithFallback(html, BODY).getElementsByTagName(BODY)[0]\n          .childNodes;\n      }\n\n      break;\n  }\n\n  return [];\n}\n\nmodule.exports = domparser;\n"]},"metadata":{},"sourceType":"script"}