{"ast":null,"code":"var HTMLDOMPropertyConfig = require('./lib/HTMLDOMPropertyConfig');\n\nvar SVGDOMPropertyConfig = require('./lib/SVGDOMPropertyConfig');\n\nvar injection = require('./lib/injection');\n\nvar MUST_USE_PROPERTY = injection.MUST_USE_PROPERTY;\nvar HAS_BOOLEAN_VALUE = injection.HAS_BOOLEAN_VALUE;\nvar HAS_NUMERIC_VALUE = injection.HAS_NUMERIC_VALUE;\nvar HAS_POSITIVE_NUMERIC_VALUE = injection.HAS_POSITIVE_NUMERIC_VALUE;\nvar HAS_OVERLOADED_BOOLEAN_VALUE = injection.HAS_OVERLOADED_BOOLEAN_VALUE;\n/**\n * @see https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/DOMProperty.js#L14-L16\n *\n * @param  {Number}  value\n * @param  {Number}  bitmask\n * @return {Boolean}\n */\n\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n/**\n * @see https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/DOMProperty.js#L57\n *\n * @param {Object}  domPropertyConfig - HTMLDOMPropertyConfig or SVGDOMPropertyConfig\n * @param {Object}  config            - The object to be mutated\n * @param {Boolean} isSVG             - Whether the injected config is HTML or SVG (it assumes the default is HTML)\n */\n\n\nfunction injectDOMPropertyConfig(domPropertyConfig, config, isSVG) {\n  var Properties = domPropertyConfig.Properties;\n  var DOMAttributeNames = domPropertyConfig.DOMAttributeNames;\n  var attributeName;\n  var propertyName;\n  var propConfig;\n\n  for (propertyName in Properties) {\n    attributeName = DOMAttributeNames[propertyName] || (isSVG ? propertyName : propertyName.toLowerCase());\n    propConfig = Properties[propertyName];\n    config[attributeName] = {\n      attributeName: attributeName,\n      propertyName: propertyName,\n      mustUseProperty: checkMask(propConfig, MUST_USE_PROPERTY),\n      hasBooleanValue: checkMask(propConfig, HAS_BOOLEAN_VALUE),\n      hasNumericValue: checkMask(propConfig, HAS_NUMERIC_VALUE),\n      hasPositiveNumericValue: checkMask(propConfig, HAS_POSITIVE_NUMERIC_VALUE),\n      hasOverloadedBooleanValue: checkMask(propConfig, HAS_OVERLOADED_BOOLEAN_VALUE)\n    };\n  }\n}\n/**\n * HTML properties config.\n *\n * @type {Object}\n */\n\n\nvar html = {};\ninjectDOMPropertyConfig(HTMLDOMPropertyConfig, html);\n/**\n * SVG properties config.\n *\n * @type {Object}\n */\n\nvar svg = {};\ninjectDOMPropertyConfig(SVGDOMPropertyConfig, svg, true);\n/**\n * HTML and SVG properties config.\n *\n * @type {Object}\n */\n\nvar properties = {};\ninjectDOMPropertyConfig(HTMLDOMPropertyConfig, properties);\ninjectDOMPropertyConfig(SVGDOMPropertyConfig, properties, true);\nvar ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nvar ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nmodule.exports = {\n  html: html,\n  svg: svg,\n  properties: properties,\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   *\n   * @see https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/HTMLDOMPropertyConfig.js#L23-L25\n   *\n   * @param {String}\n   * @return {Boolean}\n   */\n  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$'))\n};","map":{"version":3,"sources":["/home/matheus/Documents/UNB/MDS/ObraCerta/front/node_modules/react-property/index.js"],"names":["HTMLDOMPropertyConfig","require","SVGDOMPropertyConfig","injection","MUST_USE_PROPERTY","HAS_BOOLEAN_VALUE","HAS_NUMERIC_VALUE","HAS_POSITIVE_NUMERIC_VALUE","HAS_OVERLOADED_BOOLEAN_VALUE","checkMask","value","bitmask","injectDOMPropertyConfig","domPropertyConfig","config","isSVG","Properties","DOMAttributeNames","attributeName","propertyName","propConfig","toLowerCase","mustUseProperty","hasBooleanValue","hasNumericValue","hasPositiveNumericValue","hasOverloadedBooleanValue","html","svg","properties","ATTRIBUTE_NAME_START_CHAR","ATTRIBUTE_NAME_CHAR","module","exports","isCustomAttribute","RegExp","prototype","test","bind"],"mappings":"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","sourcesContent":["var HTMLDOMPropertyConfig = require('./lib/HTMLDOMPropertyConfig');\nvar SVGDOMPropertyConfig = require('./lib/SVGDOMPropertyConfig');\nvar injection = require('./lib/injection');\n\nvar MUST_USE_PROPERTY = injection.MUST_USE_PROPERTY;\nvar HAS_BOOLEAN_VALUE = injection.HAS_BOOLEAN_VALUE;\nvar HAS_NUMERIC_VALUE = injection.HAS_NUMERIC_VALUE;\nvar HAS_POSITIVE_NUMERIC_VALUE = injection.HAS_POSITIVE_NUMERIC_VALUE;\nvar HAS_OVERLOADED_BOOLEAN_VALUE = injection.HAS_OVERLOADED_BOOLEAN_VALUE;\n\n/**\n * @see https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/DOMProperty.js#L14-L16\n *\n * @param  {Number}  value\n * @param  {Number}  bitmask\n * @return {Boolean}\n */\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n\n/**\n * @see https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/DOMProperty.js#L57\n *\n * @param {Object}  domPropertyConfig - HTMLDOMPropertyConfig or SVGDOMPropertyConfig\n * @param {Object}  config            - The object to be mutated\n * @param {Boolean} isSVG             - Whether the injected config is HTML or SVG (it assumes the default is HTML)\n */\nfunction injectDOMPropertyConfig(domPropertyConfig, config, isSVG) {\n  var Properties = domPropertyConfig.Properties;\n  var DOMAttributeNames = domPropertyConfig.DOMAttributeNames;\n  var attributeName;\n  var propertyName;\n  var propConfig;\n\n  for (propertyName in Properties) {\n    attributeName =\n      DOMAttributeNames[propertyName] ||\n      (isSVG ? propertyName : propertyName.toLowerCase());\n    propConfig = Properties[propertyName];\n\n    config[attributeName] = {\n      attributeName: attributeName,\n      propertyName: propertyName,\n      mustUseProperty: checkMask(propConfig, MUST_USE_PROPERTY),\n      hasBooleanValue: checkMask(propConfig, HAS_BOOLEAN_VALUE),\n      hasNumericValue: checkMask(propConfig, HAS_NUMERIC_VALUE),\n      hasPositiveNumericValue: checkMask(\n        propConfig,\n        HAS_POSITIVE_NUMERIC_VALUE\n      ),\n      hasOverloadedBooleanValue: checkMask(\n        propConfig,\n        HAS_OVERLOADED_BOOLEAN_VALUE\n      )\n    };\n  }\n}\n\n/**\n * HTML properties config.\n *\n * @type {Object}\n */\nvar html = {};\ninjectDOMPropertyConfig(HTMLDOMPropertyConfig, html);\n\n/**\n * SVG properties config.\n *\n * @type {Object}\n */\nvar svg = {};\ninjectDOMPropertyConfig(SVGDOMPropertyConfig, svg, true);\n\n/**\n * HTML and SVG properties config.\n *\n * @type {Object}\n */\nvar properties = {};\ninjectDOMPropertyConfig(HTMLDOMPropertyConfig, properties);\ninjectDOMPropertyConfig(SVGDOMPropertyConfig, properties, true);\n\nvar ATTRIBUTE_NAME_START_CHAR =\n  ':A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nvar ATTRIBUTE_NAME_CHAR =\n  ATTRIBUTE_NAME_START_CHAR + '\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\n\nmodule.exports = {\n  html: html,\n  svg: svg,\n  properties: properties,\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   *\n   * @see https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/HTMLDOMPropertyConfig.js#L23-L25\n   *\n   * @param {String}\n   * @return {Boolean}\n   */\n  isCustomAttribute: RegExp.prototype.test.bind(\n    new RegExp('^(data|aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$')\n  )\n};\n"]},"metadata":{},"sourceType":"script"}