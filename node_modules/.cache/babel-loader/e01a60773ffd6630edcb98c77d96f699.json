{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar key = {\n  fullscreenEnabled: 0,\n  fullscreenElement: 1,\n  requestFullscreen: 2,\n  exitFullscreen: 3,\n  fullscreenchange: 4,\n  fullscreenerror: 5,\n  fullscreen: 6\n};\nvar webkit = ['webkitFullscreenEnabled', 'webkitFullscreenElement', 'webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitfullscreenchange', 'webkitfullscreenerror', '-webkit-full-screen'];\nvar moz = ['mozFullScreenEnabled', 'mozFullScreenElement', 'mozRequestFullScreen', 'mozCancelFullScreen', 'mozfullscreenchange', 'mozfullscreenerror', '-moz-full-screen'];\nvar ms = ['msFullscreenEnabled', 'msFullscreenElement', 'msRequestFullscreen', 'msExitFullscreen', 'MSFullscreenChange', 'MSFullscreenError', '-ms-fullscreen']; // so it doesn't throw if no window or document\n\nvar document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\nvar vendor = 'fullscreenEnabled' in document && Object.keys(key) || webkit[0] in document && webkit || moz[0] in document && moz || ms[0] in document && ms || [];\nexports.default = {\n  requestFullscreen: function requestFullscreen(element) {\n    return element[vendor[key.requestFullscreen]]();\n  },\n  requestFullscreenFunction: function requestFullscreenFunction(element) {\n    return element[vendor[key.requestFullscreen]];\n  },\n\n  get exitFullscreen() {\n    return document[vendor[key.exitFullscreen]].bind(document);\n  },\n\n  get fullscreenPseudoClass() {\n    return ':' + vendor[key.fullscreen];\n  },\n\n  addEventListener: function addEventListener(type, handler, options) {\n    return document.addEventListener(vendor[key[type]], handler, options);\n  },\n  removeEventListener: function removeEventListener(type, handler, options) {\n    return document.removeEventListener(vendor[key[type]], handler, options);\n  },\n\n  get fullscreenEnabled() {\n    return Boolean(document[vendor[key.fullscreenEnabled]]);\n  },\n\n  set fullscreenEnabled(val) {},\n\n  get fullscreenElement() {\n    return document[vendor[key.fullscreenElement]];\n  },\n\n  set fullscreenElement(val) {},\n\n  get onfullscreenchange() {\n    return document[('on' + vendor[key.fullscreenchange]).toLowerCase()];\n  },\n\n  set onfullscreenchange(handler) {\n    return document[('on' + vendor[key.fullscreenchange]).toLowerCase()] = handler;\n  },\n\n  get onfullscreenerror() {\n    return document[('on' + vendor[key.fullscreenerror]).toLowerCase()];\n  },\n\n  set onfullscreenerror(handler) {\n    return document[('on' + vendor[key.fullscreenerror]).toLowerCase()] = handler;\n  }\n\n};","map":{"version":3,"sources":["/home/matheus/Documents/UNB/MDS/ObraCerta/front/node_modules/fscreen/lib/index.js"],"names":["Object","defineProperty","exports","value","key","fullscreenEnabled","fullscreenElement","requestFullscreen","exitFullscreen","fullscreenchange","fullscreenerror","fullscreen","webkit","moz","ms","document","window","vendor","keys","default","element","requestFullscreenFunction","bind","fullscreenPseudoClass","addEventListener","type","handler","options","removeEventListener","Boolean","val","onfullscreenchange","toLowerCase","onfullscreenerror"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGA,IAAIC,GAAG,GAAG;AACRC,EAAAA,iBAAiB,EAAE,CADX;AAERC,EAAAA,iBAAiB,EAAE,CAFX;AAGRC,EAAAA,iBAAiB,EAAE,CAHX;AAIRC,EAAAA,cAAc,EAAE,CAJR;AAKRC,EAAAA,gBAAgB,EAAE,CALV;AAMRC,EAAAA,eAAe,EAAE,CANT;AAORC,EAAAA,UAAU,EAAE;AAPJ,CAAV;AAUA,IAAIC,MAAM,GAAG,CAAC,yBAAD,EAA4B,yBAA5B,EAAuD,yBAAvD,EAAkF,sBAAlF,EAA0G,wBAA1G,EAAoI,uBAApI,EAA6J,qBAA7J,CAAb;AAEA,IAAIC,GAAG,GAAG,CAAC,sBAAD,EAAyB,sBAAzB,EAAiD,sBAAjD,EAAyE,qBAAzE,EAAgG,qBAAhG,EAAuH,oBAAvH,EAA6I,kBAA7I,CAAV;AAEA,IAAIC,EAAE,GAAG,CAAC,qBAAD,EAAwB,qBAAxB,EAA+C,qBAA/C,EAAsE,kBAAtE,EAA0F,oBAA1F,EAAgH,mBAAhH,EAAqI,gBAArI,CAAT,C,CAEA;;AACA,IAAIC,QAAQ,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACD,QAAd,KAA2B,WAA5D,GAA0EC,MAAM,CAACD,QAAjF,GAA4F,EAA3G;AAEA,IAAIE,MAAM,GAAG,uBAAuBF,QAAvB,IAAmCf,MAAM,CAACkB,IAAP,CAAYd,GAAZ,CAAnC,IAAuDQ,MAAM,CAAC,CAAD,CAAN,IAAaG,QAAb,IAAyBH,MAAhF,IAA0FC,GAAG,CAAC,CAAD,CAAH,IAAUE,QAAV,IAAsBF,GAAhH,IAAuHC,EAAE,CAAC,CAAD,CAAF,IAASC,QAAT,IAAqBD,EAA5I,IAAkJ,EAA/J;AAEAZ,OAAO,CAACiB,OAAR,GAAkB;AAChBZ,EAAAA,iBAAiB,EAAE,SAASA,iBAAT,CAA2Ba,OAA3B,EAAoC;AACrD,WAAOA,OAAO,CAACH,MAAM,CAACb,GAAG,CAACG,iBAAL,CAAP,CAAP,EAAP;AACD,GAHe;AAIhBc,EAAAA,yBAAyB,EAAE,SAASA,yBAAT,CAAmCD,OAAnC,EAA4C;AACrE,WAAOA,OAAO,CAACH,MAAM,CAACb,GAAG,CAACG,iBAAL,CAAP,CAAd;AACD,GANe;;AAOhB,MAAIC,cAAJ,GAAqB;AACnB,WAAOO,QAAQ,CAACE,MAAM,CAACb,GAAG,CAACI,cAAL,CAAP,CAAR,CAAqCc,IAArC,CAA0CP,QAA1C,CAAP;AACD,GATe;;AAUhB,MAAIQ,qBAAJ,GAA4B;AAC1B,WAAO,MAAMN,MAAM,CAACb,GAAG,CAACO,UAAL,CAAnB;AACD,GAZe;;AAahBa,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BC,IAA1B,EAAgCC,OAAhC,EAAyCC,OAAzC,EAAkD;AAClE,WAAOZ,QAAQ,CAACS,gBAAT,CAA0BP,MAAM,CAACb,GAAG,CAACqB,IAAD,CAAJ,CAAhC,EAA6CC,OAA7C,EAAsDC,OAAtD,CAAP;AACD,GAfe;AAgBhBC,EAAAA,mBAAmB,EAAE,SAASA,mBAAT,CAA6BH,IAA7B,EAAmCC,OAAnC,EAA4CC,OAA5C,EAAqD;AACxE,WAAOZ,QAAQ,CAACa,mBAAT,CAA6BX,MAAM,CAACb,GAAG,CAACqB,IAAD,CAAJ,CAAnC,EAAgDC,OAAhD,EAAyDC,OAAzD,CAAP;AACD,GAlBe;;AAmBhB,MAAItB,iBAAJ,GAAwB;AACtB,WAAOwB,OAAO,CAACd,QAAQ,CAACE,MAAM,CAACb,GAAG,CAACC,iBAAL,CAAP,CAAT,CAAd;AACD,GArBe;;AAsBhB,MAAIA,iBAAJ,CAAsByB,GAAtB,EAA2B,CAAE,CAtBb;;AAuBhB,MAAIxB,iBAAJ,GAAwB;AACtB,WAAOS,QAAQ,CAACE,MAAM,CAACb,GAAG,CAACE,iBAAL,CAAP,CAAf;AACD,GAzBe;;AA0BhB,MAAIA,iBAAJ,CAAsBwB,GAAtB,EAA2B,CAAE,CA1Bb;;AA2BhB,MAAIC,kBAAJ,GAAyB;AACvB,WAAOhB,QAAQ,CAAC,CAAC,OAAOE,MAAM,CAACb,GAAG,CAACK,gBAAL,CAAd,EAAsCuB,WAAtC,EAAD,CAAf;AACD,GA7Be;;AA8BhB,MAAID,kBAAJ,CAAuBL,OAAvB,EAAgC;AAC9B,WAAOX,QAAQ,CAAC,CAAC,OAAOE,MAAM,CAACb,GAAG,CAACK,gBAAL,CAAd,EAAsCuB,WAAtC,EAAD,CAAR,GAAgEN,OAAvE;AACD,GAhCe;;AAiChB,MAAIO,iBAAJ,GAAwB;AACtB,WAAOlB,QAAQ,CAAC,CAAC,OAAOE,MAAM,CAACb,GAAG,CAACM,eAAL,CAAd,EAAqCsB,WAArC,EAAD,CAAf;AACD,GAnCe;;AAoChB,MAAIC,iBAAJ,CAAsBP,OAAtB,EAA+B;AAC7B,WAAOX,QAAQ,CAAC,CAAC,OAAOE,MAAM,CAACb,GAAG,CAACM,eAAL,CAAd,EAAqCsB,WAArC,EAAD,CAAR,GAA+DN,OAAtE;AACD;;AAtCe,CAAlB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar key = {\n  fullscreenEnabled: 0,\n  fullscreenElement: 1,\n  requestFullscreen: 2,\n  exitFullscreen: 3,\n  fullscreenchange: 4,\n  fullscreenerror: 5,\n  fullscreen: 6\n};\n\nvar webkit = ['webkitFullscreenEnabled', 'webkitFullscreenElement', 'webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitfullscreenchange', 'webkitfullscreenerror', '-webkit-full-screen'];\n\nvar moz = ['mozFullScreenEnabled', 'mozFullScreenElement', 'mozRequestFullScreen', 'mozCancelFullScreen', 'mozfullscreenchange', 'mozfullscreenerror', '-moz-full-screen'];\n\nvar ms = ['msFullscreenEnabled', 'msFullscreenElement', 'msRequestFullscreen', 'msExitFullscreen', 'MSFullscreenChange', 'MSFullscreenError', '-ms-fullscreen'];\n\n// so it doesn't throw if no window or document\nvar document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\n\nvar vendor = 'fullscreenEnabled' in document && Object.keys(key) || webkit[0] in document && webkit || moz[0] in document && moz || ms[0] in document && ms || [];\n\nexports.default = {\n  requestFullscreen: function requestFullscreen(element) {\n    return element[vendor[key.requestFullscreen]]();\n  },\n  requestFullscreenFunction: function requestFullscreenFunction(element) {\n    return element[vendor[key.requestFullscreen]];\n  },\n  get exitFullscreen() {\n    return document[vendor[key.exitFullscreen]].bind(document);\n  },\n  get fullscreenPseudoClass() {\n    return ':' + vendor[key.fullscreen];\n  },\n  addEventListener: function addEventListener(type, handler, options) {\n    return document.addEventListener(vendor[key[type]], handler, options);\n  },\n  removeEventListener: function removeEventListener(type, handler, options) {\n    return document.removeEventListener(vendor[key[type]], handler, options);\n  },\n  get fullscreenEnabled() {\n    return Boolean(document[vendor[key.fullscreenEnabled]]);\n  },\n  set fullscreenEnabled(val) {},\n  get fullscreenElement() {\n    return document[vendor[key.fullscreenElement]];\n  },\n  set fullscreenElement(val) {},\n  get onfullscreenchange() {\n    return document[('on' + vendor[key.fullscreenchange]).toLowerCase()];\n  },\n  set onfullscreenchange(handler) {\n    return document[('on' + vendor[key.fullscreenchange]).toLowerCase()] = handler;\n  },\n  get onfullscreenerror() {\n    return document[('on' + vendor[key.fullscreenerror]).toLowerCase()];\n  },\n  set onfullscreenerror(handler) {\n    return document[('on' + vendor[key.fullscreenerror]).toLowerCase()] = handler;\n  }\n};"]},"metadata":{},"sourceType":"script"}