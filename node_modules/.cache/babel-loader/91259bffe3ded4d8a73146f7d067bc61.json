{"ast":null,"code":"var CASE_SENSITIVE_TAG_NAMES = require('./constants').CASE_SENSITIVE_TAG_NAMES;\n\nvar caseSensitiveTagNamesMap = {};\nvar tagName;\n\nfor (var i = 0, len = CASE_SENSITIVE_TAG_NAMES.length; i < len; i++) {\n  tagName = CASE_SENSITIVE_TAG_NAMES[i];\n  caseSensitiveTagNamesMap[tagName.toLowerCase()] = tagName;\n}\n/**\n * Gets case-sensitive tag name.\n *\n * @param  {String}           tagName - The lowercase tag name.\n * @return {String|undefined}\n */\n\n\nfunction getCaseSensitiveTagName(tagName) {\n  return caseSensitiveTagNamesMap[tagName];\n}\n/**\n * Formats DOM attributes to a hash map.\n *\n * @param  {NamedNodeMap} attributes - The list of attributes.\n * @return {Object}                  - A map of attribute name to value.\n */\n\n\nfunction formatAttributes(attributes) {\n  var result = {};\n  var attribute; // `NamedNodeMap` is array-like\n\n  for (var i = 0, len = attributes.length; i < len; i++) {\n    attribute = attributes[i];\n    result[attribute.name] = attribute.value;\n  }\n\n  return result;\n}\n/**\n * Corrects the tag name if it is case-sensitive (SVG).\n * Otherwise, returns the lowercase tag name (HTML).\n *\n * @param  {String} tagName - The lowercase tag name.\n * @return {String}         - The formatted tag name.\n */\n\n\nfunction formatTagName(tagName) {\n  tagName = tagName.toLowerCase();\n  var caseSensitiveTagName = getCaseSensitiveTagName(tagName);\n\n  if (caseSensitiveTagName) {\n    return caseSensitiveTagName;\n  }\n\n  return tagName;\n}\n/**\n * Formats the browser DOM nodes to mimic the output of `htmlparser2.parseDOM()`.\n *\n * @param  {NodeList} nodes        - The DOM nodes.\n * @param  {Object}   [parentObj]  - The formatted parent node.\n * @param  {String}   [directive]  - The directive.\n * @return {Object[]}              - The formatted DOM object.\n */\n\n\nfunction formatDOM(nodes, parentObj, directive) {\n  parentObj = parentObj || null;\n  var result = [];\n  var node;\n  var prevNode;\n  var nodeObj; // `NodeList` is array-like\n\n  for (var i = 0, len = nodes.length; i < len; i++) {\n    node = nodes[i]; // reset\n\n    nodeObj = {\n      next: null,\n      prev: result[i - 1] || null,\n      parent: parentObj\n    }; // set the next node for the previous node (if applicable)\n\n    prevNode = result[i - 1];\n\n    if (prevNode) {\n      prevNode.next = nodeObj;\n    } // set the node name if it's not \"#text\" or \"#comment\"\n    // e.g., \"div\"\n\n\n    if (node.nodeName[0] !== '#') {\n      nodeObj.name = formatTagName(node.nodeName); // also, nodes of type \"tag\" have \"attribs\"\n\n      nodeObj.attribs = {}; // default\n\n      if (node.attributes && node.attributes.length) {\n        nodeObj.attribs = formatAttributes(node.attributes);\n      }\n    } // set the node type\n    // e.g., \"tag\"\n\n\n    switch (node.nodeType) {\n      // 1 = element\n      case 1:\n        if (nodeObj.name === 'script' || nodeObj.name === 'style') {\n          nodeObj.type = nodeObj.name;\n        } else {\n          nodeObj.type = 'tag';\n        } // recursively format the children\n\n\n        nodeObj.children = formatDOM(node.childNodes, nodeObj);\n        break;\n      // 2 = attribute\n      // 3 = text\n\n      case 3:\n        nodeObj.type = 'text';\n        nodeObj.data = node.nodeValue;\n        break;\n      // 8 = comment\n\n      case 8:\n        nodeObj.type = 'comment';\n        nodeObj.data = node.nodeValue;\n        break;\n    }\n\n    result.push(nodeObj);\n  }\n\n  if (directive) {\n    result.unshift({\n      name: directive.substring(0, directive.indexOf(' ')).toLowerCase(),\n      data: directive,\n      type: 'directive',\n      next: result[0] ? result[0] : null,\n      prev: null,\n      parent: parentObj\n    });\n\n    if (result[1]) {\n      result[1].prev = result[0];\n    }\n  }\n\n  return result;\n}\n/**\n * Detects IE with or without version.\n *\n * @param  {Number}  [version] - The IE version to detect.\n * @return {Boolean}           - Whether IE or the version has been detected.\n */\n\n\nfunction isIE(version) {\n  if (version) {\n    return document.documentMode === version;\n  }\n\n  return /(MSIE |Trident\\/|Edge\\/)/.test(navigator.userAgent);\n}\n\nmodule.exports = {\n  formatAttributes: formatAttributes,\n  formatDOM: formatDOM,\n  isIE: isIE\n};","map":{"version":3,"sources":["/home/matheus/Documents/UNB/MDS/ObraCerta/front/node_modules/html-dom-parser/lib/utilities.js"],"names":["CASE_SENSITIVE_TAG_NAMES","require","caseSensitiveTagNamesMap","tagName","i","len","length","toLowerCase","getCaseSensitiveTagName","formatAttributes","attributes","result","attribute","name","value","formatTagName","caseSensitiveTagName","formatDOM","nodes","parentObj","directive","node","prevNode","nodeObj","next","prev","parent","nodeName","attribs","nodeType","type","children","childNodes","data","nodeValue","push","unshift","substring","indexOf","isIE","version","document","documentMode","test","navigator","userAgent","module","exports"],"mappings":"AAAA,IAAIA,wBAAwB,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,wBAAtD;;AAEA,IAAIE,wBAAwB,GAAG,EAA/B;AACA,IAAIC,OAAJ;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,wBAAwB,CAACM,MAA/C,EAAuDF,CAAC,GAAGC,GAA3D,EAAgED,CAAC,EAAjE,EAAqE;AACnED,EAAAA,OAAO,GAAGH,wBAAwB,CAACI,CAAD,CAAlC;AACAF,EAAAA,wBAAwB,CAACC,OAAO,CAACI,WAAR,EAAD,CAAxB,GAAkDJ,OAAlD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,uBAAT,CAAiCL,OAAjC,EAA0C;AACxC,SAAOD,wBAAwB,CAACC,OAAD,CAA/B;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,gBAAT,CAA0BC,UAA1B,EAAsC;AACpC,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,SAAJ,CAFoC,CAGpC;;AACA,OAAK,IAAIR,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGK,UAAU,CAACJ,MAAjC,EAAyCF,CAAC,GAAGC,GAA7C,EAAkDD,CAAC,EAAnD,EAAuD;AACrDQ,IAAAA,SAAS,GAAGF,UAAU,CAACN,CAAD,CAAtB;AACAO,IAAAA,MAAM,CAACC,SAAS,CAACC,IAAX,CAAN,GAAyBD,SAAS,CAACE,KAAnC;AACD;;AACD,SAAOH,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,aAAT,CAAuBZ,OAAvB,EAAgC;AAC9BA,EAAAA,OAAO,GAAGA,OAAO,CAACI,WAAR,EAAV;AACA,MAAIS,oBAAoB,GAAGR,uBAAuB,CAACL,OAAD,CAAlD;;AACA,MAAIa,oBAAJ,EAA0B;AACxB,WAAOA,oBAAP;AACD;;AACD,SAAOb,OAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASc,SAAT,CAAmBC,KAAnB,EAA0BC,SAA1B,EAAqCC,SAArC,EAAgD;AAC9CD,EAAAA,SAAS,GAAGA,SAAS,IAAI,IAAzB;AAEA,MAAIR,MAAM,GAAG,EAAb;AACA,MAAIU,IAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,OAAJ,CAN8C,CAQ9C;;AACA,OAAK,IAAInB,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGa,KAAK,CAACZ,MAA5B,EAAoCF,CAAC,GAAGC,GAAxC,EAA6CD,CAAC,EAA9C,EAAkD;AAChDiB,IAAAA,IAAI,GAAGH,KAAK,CAACd,CAAD,CAAZ,CADgD,CAEhD;;AACAmB,IAAAA,OAAO,GAAG;AACRC,MAAAA,IAAI,EAAE,IADE;AAERC,MAAAA,IAAI,EAAEd,MAAM,CAACP,CAAC,GAAG,CAAL,CAAN,IAAiB,IAFf;AAGRsB,MAAAA,MAAM,EAAEP;AAHA,KAAV,CAHgD,CAShD;;AACAG,IAAAA,QAAQ,GAAGX,MAAM,CAACP,CAAC,GAAG,CAAL,CAAjB;;AACA,QAAIkB,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACE,IAAT,GAAgBD,OAAhB;AACD,KAb+C,CAehD;AACA;;;AACA,QAAIF,IAAI,CAACM,QAAL,CAAc,CAAd,MAAqB,GAAzB,EAA8B;AAC5BJ,MAAAA,OAAO,CAACV,IAAR,GAAeE,aAAa,CAACM,IAAI,CAACM,QAAN,CAA5B,CAD4B,CAE5B;;AACAJ,MAAAA,OAAO,CAACK,OAAR,GAAkB,EAAlB,CAH4B,CAGN;;AACtB,UAAIP,IAAI,CAACX,UAAL,IAAmBW,IAAI,CAACX,UAAL,CAAgBJ,MAAvC,EAA+C;AAC7CiB,QAAAA,OAAO,CAACK,OAAR,GAAkBnB,gBAAgB,CAACY,IAAI,CAACX,UAAN,CAAlC;AACD;AACF,KAxB+C,CA0BhD;AACA;;;AACA,YAAQW,IAAI,CAACQ,QAAb;AACE;AACA,WAAK,CAAL;AACE,YAAIN,OAAO,CAACV,IAAR,KAAiB,QAAjB,IAA6BU,OAAO,CAACV,IAAR,KAAiB,OAAlD,EAA2D;AACzDU,UAAAA,OAAO,CAACO,IAAR,GAAeP,OAAO,CAACV,IAAvB;AACD,SAFD,MAEO;AACLU,UAAAA,OAAO,CAACO,IAAR,GAAe,KAAf;AACD,SALH,CAME;;;AACAP,QAAAA,OAAO,CAACQ,QAAR,GAAmBd,SAAS,CAACI,IAAI,CAACW,UAAN,EAAkBT,OAAlB,CAA5B;AACA;AACF;AACA;;AACA,WAAK,CAAL;AACEA,QAAAA,OAAO,CAACO,IAAR,GAAe,MAAf;AACAP,QAAAA,OAAO,CAACU,IAAR,GAAeZ,IAAI,CAACa,SAApB;AACA;AACF;;AACA,WAAK,CAAL;AACEX,QAAAA,OAAO,CAACO,IAAR,GAAe,SAAf;AACAP,QAAAA,OAAO,CAACU,IAAR,GAAeZ,IAAI,CAACa,SAApB;AACA;AArBJ;;AAwBAvB,IAAAA,MAAM,CAACwB,IAAP,CAAYZ,OAAZ;AACD;;AAED,MAAIH,SAAJ,EAAe;AACbT,IAAAA,MAAM,CAACyB,OAAP,CAAe;AACbvB,MAAAA,IAAI,EAAEO,SAAS,CAACiB,SAAV,CAAoB,CAApB,EAAuBjB,SAAS,CAACkB,OAAV,CAAkB,GAAlB,CAAvB,EAA+C/B,WAA/C,EADO;AAEb0B,MAAAA,IAAI,EAAEb,SAFO;AAGbU,MAAAA,IAAI,EAAE,WAHO;AAIbN,MAAAA,IAAI,EAAEb,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAlB,GAAwB,IAJjB;AAKbc,MAAAA,IAAI,EAAE,IALO;AAMbC,MAAAA,MAAM,EAAEP;AANK,KAAf;;AASA,QAAIR,MAAM,CAAC,CAAD,CAAV,EAAe;AACbA,MAAAA,MAAM,CAAC,CAAD,CAAN,CAAUc,IAAV,GAAiBd,MAAM,CAAC,CAAD,CAAvB;AACD;AACF;;AAED,SAAOA,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS4B,IAAT,CAAcC,OAAd,EAAuB;AACrB,MAAIA,OAAJ,EAAa;AACX,WAAOC,QAAQ,CAACC,YAAT,KAA0BF,OAAjC;AACD;;AACD,SAAO,2BAA2BG,IAA3B,CAAgCC,SAAS,CAACC,SAA1C,CAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACftC,EAAAA,gBAAgB,EAAEA,gBADH;AAEfQ,EAAAA,SAAS,EAAEA,SAFI;AAGfsB,EAAAA,IAAI,EAAEA;AAHS,CAAjB","sourcesContent":["var CASE_SENSITIVE_TAG_NAMES = require('./constants').CASE_SENSITIVE_TAG_NAMES;\n\nvar caseSensitiveTagNamesMap = {};\nvar tagName;\nfor (var i = 0, len = CASE_SENSITIVE_TAG_NAMES.length; i < len; i++) {\n  tagName = CASE_SENSITIVE_TAG_NAMES[i];\n  caseSensitiveTagNamesMap[tagName.toLowerCase()] = tagName;\n}\n\n/**\n * Gets case-sensitive tag name.\n *\n * @param  {String}           tagName - The lowercase tag name.\n * @return {String|undefined}\n */\nfunction getCaseSensitiveTagName(tagName) {\n  return caseSensitiveTagNamesMap[tagName];\n}\n\n/**\n * Formats DOM attributes to a hash map.\n *\n * @param  {NamedNodeMap} attributes - The list of attributes.\n * @return {Object}                  - A map of attribute name to value.\n */\nfunction formatAttributes(attributes) {\n  var result = {};\n  var attribute;\n  // `NamedNodeMap` is array-like\n  for (var i = 0, len = attributes.length; i < len; i++) {\n    attribute = attributes[i];\n    result[attribute.name] = attribute.value;\n  }\n  return result;\n}\n\n/**\n * Corrects the tag name if it is case-sensitive (SVG).\n * Otherwise, returns the lowercase tag name (HTML).\n *\n * @param  {String} tagName - The lowercase tag name.\n * @return {String}         - The formatted tag name.\n */\nfunction formatTagName(tagName) {\n  tagName = tagName.toLowerCase();\n  var caseSensitiveTagName = getCaseSensitiveTagName(tagName);\n  if (caseSensitiveTagName) {\n    return caseSensitiveTagName;\n  }\n  return tagName;\n}\n\n/**\n * Formats the browser DOM nodes to mimic the output of `htmlparser2.parseDOM()`.\n *\n * @param  {NodeList} nodes        - The DOM nodes.\n * @param  {Object}   [parentObj]  - The formatted parent node.\n * @param  {String}   [directive]  - The directive.\n * @return {Object[]}              - The formatted DOM object.\n */\nfunction formatDOM(nodes, parentObj, directive) {\n  parentObj = parentObj || null;\n\n  var result = [];\n  var node;\n  var prevNode;\n  var nodeObj;\n\n  // `NodeList` is array-like\n  for (var i = 0, len = nodes.length; i < len; i++) {\n    node = nodes[i];\n    // reset\n    nodeObj = {\n      next: null,\n      prev: result[i - 1] || null,\n      parent: parentObj\n    };\n\n    // set the next node for the previous node (if applicable)\n    prevNode = result[i - 1];\n    if (prevNode) {\n      prevNode.next = nodeObj;\n    }\n\n    // set the node name if it's not \"#text\" or \"#comment\"\n    // e.g., \"div\"\n    if (node.nodeName[0] !== '#') {\n      nodeObj.name = formatTagName(node.nodeName);\n      // also, nodes of type \"tag\" have \"attribs\"\n      nodeObj.attribs = {}; // default\n      if (node.attributes && node.attributes.length) {\n        nodeObj.attribs = formatAttributes(node.attributes);\n      }\n    }\n\n    // set the node type\n    // e.g., \"tag\"\n    switch (node.nodeType) {\n      // 1 = element\n      case 1:\n        if (nodeObj.name === 'script' || nodeObj.name === 'style') {\n          nodeObj.type = nodeObj.name;\n        } else {\n          nodeObj.type = 'tag';\n        }\n        // recursively format the children\n        nodeObj.children = formatDOM(node.childNodes, nodeObj);\n        break;\n      // 2 = attribute\n      // 3 = text\n      case 3:\n        nodeObj.type = 'text';\n        nodeObj.data = node.nodeValue;\n        break;\n      // 8 = comment\n      case 8:\n        nodeObj.type = 'comment';\n        nodeObj.data = node.nodeValue;\n        break;\n    }\n\n    result.push(nodeObj);\n  }\n\n  if (directive) {\n    result.unshift({\n      name: directive.substring(0, directive.indexOf(' ')).toLowerCase(),\n      data: directive,\n      type: 'directive',\n      next: result[0] ? result[0] : null,\n      prev: null,\n      parent: parentObj\n    });\n\n    if (result[1]) {\n      result[1].prev = result[0];\n    }\n  }\n\n  return result;\n}\n\n/**\n * Detects IE with or without version.\n *\n * @param  {Number}  [version] - The IE version to detect.\n * @return {Boolean}           - Whether IE or the version has been detected.\n */\nfunction isIE(version) {\n  if (version) {\n    return document.documentMode === version;\n  }\n  return /(MSIE |Trident\\/|Edge\\/)/.test(navigator.userAgent);\n}\n\nmodule.exports = {\n  formatAttributes: formatAttributes,\n  formatDOM: formatDOM,\n  isIE: isIE\n};\n"]},"metadata":{},"sourceType":"script"}