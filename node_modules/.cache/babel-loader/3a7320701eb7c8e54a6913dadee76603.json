{"ast":null,"code":"var React = require('react');\n\nvar hyphenPatternRegex = /-([a-z])/g;\nvar CUSTOM_PROPERTY_OR_NO_HYPHEN_REGEX = /^--[a-zA-Z0-9-]+$|^[^-]+$/;\n/**\n * Converts a string to camelCase.\n *\n * @param  {String} string - The string.\n * @return {String}\n */\n\nfunction camelCase(string) {\n  if (typeof string !== 'string') {\n    throw new TypeError('First argument must be a string');\n  } // custom property or no hyphen found\n\n\n  if (CUSTOM_PROPERTY_OR_NO_HYPHEN_REGEX.test(string)) {\n    return string;\n  } // convert to camelCase\n\n\n  return string.toLowerCase().replace(hyphenPatternRegex, function (_, character) {\n    return character.toUpperCase();\n  });\n}\n/**\n * Swap key with value in an object.\n *\n * @param  {Object}   obj        - The object.\n * @param  {Function} [override] - The override method.\n * @return {Object}              - The inverted object.\n */\n\n\nfunction invertObject(obj, override) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('First argument must be an object');\n  }\n\n  var key;\n  var value;\n  var isOverridePresent = typeof override === 'function';\n  var overrides = {};\n  var result = {};\n\n  for (key in obj) {\n    value = obj[key];\n\n    if (isOverridePresent) {\n      overrides = override(key, value);\n\n      if (overrides && overrides.length === 2) {\n        result[overrides[0]] = overrides[1];\n        continue;\n      }\n    }\n\n    if (typeof value === 'string') {\n      result[value] = key;\n    }\n  }\n\n  return result;\n}\n/**\n * Check if a given tag is a custom component.\n *\n * @see {@link https://github.com/facebook/react/blob/v16.6.3/packages/react-dom/src/shared/isCustomComponent.js}\n *\n * @param {string} tagName - The name of the html tag.\n * @param {Object} props   - The props being passed to the element.\n * @return {boolean}\n */\n\n\nfunction isCustomComponent(tagName, props) {\n  if (tagName.indexOf('-') === -1) {\n    return props && typeof props.is === 'string';\n  }\n\n  switch (tagName) {\n    // These are reserved SVG and MathML elements.\n    // We don't mind this whitelist too much because we expect it to never grow.\n    // The alternative is to track the namespace in a few places which is convoluted.\n    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\n    case 'annotation-xml':\n    case 'color-profile':\n    case 'font-face':\n    case 'font-face-src':\n    case 'font-face-uri':\n    case 'font-face-format':\n    case 'font-face-name':\n    case 'missing-glyph':\n      return false;\n\n    default:\n      return true;\n  }\n}\n/**\n * @constant {Boolean}\n * @see {@link https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html}\n */\n\n\nvar PRESERVE_CUSTOM_ATTRIBUTES = React.version.split('.')[0] >= 16;\nmodule.exports = {\n  PRESERVE_CUSTOM_ATTRIBUTES: PRESERVE_CUSTOM_ATTRIBUTES,\n  camelCase: camelCase,\n  invertObject: invertObject,\n  isCustomComponent: isCustomComponent\n};","map":{"version":3,"sources":["/home/matheus/Documents/UNB/MDS/ObraCerta/front/node_modules/html-react-parser/lib/utilities.js"],"names":["React","require","hyphenPatternRegex","CUSTOM_PROPERTY_OR_NO_HYPHEN_REGEX","camelCase","string","TypeError","test","toLowerCase","replace","_","character","toUpperCase","invertObject","obj","override","key","value","isOverridePresent","overrides","result","length","isCustomComponent","tagName","props","indexOf","is","PRESERVE_CUSTOM_ATTRIBUTES","version","split","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,kBAAkB,GAAG,WAAzB;AACA,IAAIC,kCAAkC,GAAG,2BAAzC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACzB,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,UAAM,IAAIC,SAAJ,CAAc,iCAAd,CAAN;AACD,GAHwB,CAKzB;;;AACA,MAAIH,kCAAkC,CAACI,IAAnC,CAAwCF,MAAxC,CAAJ,EAAqD;AACnD,WAAOA,MAAP;AACD,GARwB,CAUzB;;;AACA,SAAOA,MAAM,CACVG,WADI,GAEJC,OAFI,CAEIP,kBAFJ,EAEwB,UAAUQ,CAAV,EAAaC,SAAb,EAAwB;AACnD,WAAOA,SAAS,CAACC,WAAV,EAAP;AACD,GAJI,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,QAA3B,EAAqC;AACnC,MAAI,CAACD,GAAD,IAAQ,OAAOA,GAAP,KAAe,QAA3B,EAAqC;AACnC,UAAM,IAAIR,SAAJ,CAAc,kCAAd,CAAN;AACD;;AAED,MAAIU,GAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,iBAAiB,GAAG,OAAOH,QAAP,KAAoB,UAA5C;AACA,MAAII,SAAS,GAAG,EAAhB;AACA,MAAIC,MAAM,GAAG,EAAb;;AAEA,OAAKJ,GAAL,IAAYF,GAAZ,EAAiB;AACfG,IAAAA,KAAK,GAAGH,GAAG,CAACE,GAAD,CAAX;;AAEA,QAAIE,iBAAJ,EAAuB;AACrBC,MAAAA,SAAS,GAAGJ,QAAQ,CAACC,GAAD,EAAMC,KAAN,CAApB;;AACA,UAAIE,SAAS,IAAIA,SAAS,CAACE,MAAV,KAAqB,CAAtC,EAAyC;AACvCD,QAAAA,MAAM,CAACD,SAAS,CAAC,CAAD,CAAV,CAAN,GAAuBA,SAAS,CAAC,CAAD,CAAhC;AACA;AACD;AACF;;AAED,QAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;AAC7BG,MAAAA,MAAM,CAACH,KAAD,CAAN,GAAgBD,GAAhB;AACD;AACF;;AAED,SAAOI,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,iBAAT,CAA2BC,OAA3B,EAAoCC,KAApC,EAA2C;AACzC,MAAID,OAAO,CAACE,OAAR,CAAgB,GAAhB,MAAyB,CAAC,CAA9B,EAAiC;AAC/B,WAAOD,KAAK,IAAI,OAAOA,KAAK,CAACE,EAAb,KAAoB,QAApC;AACD;;AAED,UAAQH,OAAR;AACE;AACA;AACA;AACA;AACA,SAAK,gBAAL;AACA,SAAK,eAAL;AACA,SAAK,WAAL;AACA,SAAK,eAAL;AACA,SAAK,eAAL;AACA,SAAK,kBAAL;AACA,SAAK,gBAAL;AACA,SAAK,eAAL;AACE,aAAO,KAAP;;AACF;AACE,aAAO,IAAP;AAfJ;AAiBD;AAED;AACA;AACA;AACA;;;AACA,IAAII,0BAA0B,GAAG3B,KAAK,CAAC4B,OAAN,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,KAA+B,EAAhE;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfJ,EAAAA,0BAA0B,EAAEA,0BADb;AAEfvB,EAAAA,SAAS,EAAEA,SAFI;AAGfS,EAAAA,YAAY,EAAEA,YAHC;AAIfS,EAAAA,iBAAiB,EAAEA;AAJJ,CAAjB","sourcesContent":["var React = require('react');\nvar hyphenPatternRegex = /-([a-z])/g;\nvar CUSTOM_PROPERTY_OR_NO_HYPHEN_REGEX = /^--[a-zA-Z0-9-]+$|^[^-]+$/;\n\n/**\n * Converts a string to camelCase.\n *\n * @param  {String} string - The string.\n * @return {String}\n */\nfunction camelCase(string) {\n  if (typeof string !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  // custom property or no hyphen found\n  if (CUSTOM_PROPERTY_OR_NO_HYPHEN_REGEX.test(string)) {\n    return string;\n  }\n\n  // convert to camelCase\n  return string\n    .toLowerCase()\n    .replace(hyphenPatternRegex, function (_, character) {\n      return character.toUpperCase();\n    });\n}\n\n/**\n * Swap key with value in an object.\n *\n * @param  {Object}   obj        - The object.\n * @param  {Function} [override] - The override method.\n * @return {Object}              - The inverted object.\n */\nfunction invertObject(obj, override) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('First argument must be an object');\n  }\n\n  var key;\n  var value;\n  var isOverridePresent = typeof override === 'function';\n  var overrides = {};\n  var result = {};\n\n  for (key in obj) {\n    value = obj[key];\n\n    if (isOverridePresent) {\n      overrides = override(key, value);\n      if (overrides && overrides.length === 2) {\n        result[overrides[0]] = overrides[1];\n        continue;\n      }\n    }\n\n    if (typeof value === 'string') {\n      result[value] = key;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Check if a given tag is a custom component.\n *\n * @see {@link https://github.com/facebook/react/blob/v16.6.3/packages/react-dom/src/shared/isCustomComponent.js}\n *\n * @param {string} tagName - The name of the html tag.\n * @param {Object} props   - The props being passed to the element.\n * @return {boolean}\n */\nfunction isCustomComponent(tagName, props) {\n  if (tagName.indexOf('-') === -1) {\n    return props && typeof props.is === 'string';\n  }\n\n  switch (tagName) {\n    // These are reserved SVG and MathML elements.\n    // We don't mind this whitelist too much because we expect it to never grow.\n    // The alternative is to track the namespace in a few places which is convoluted.\n    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\n    case 'annotation-xml':\n    case 'color-profile':\n    case 'font-face':\n    case 'font-face-src':\n    case 'font-face-uri':\n    case 'font-face-format':\n    case 'font-face-name':\n    case 'missing-glyph':\n      return false;\n    default:\n      return true;\n  }\n}\n\n/**\n * @constant {Boolean}\n * @see {@link https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html}\n */\nvar PRESERVE_CUSTOM_ATTRIBUTES = React.version.split('.')[0] >= 16;\n\nmodule.exports = {\n  PRESERVE_CUSTOM_ATTRIBUTES: PRESERVE_CUSTOM_ATTRIBUTES,\n  camelCase: camelCase,\n  invertObject: invertObject,\n  isCustomComponent: isCustomComponent\n};\n"]},"metadata":{},"sourceType":"script"}